# -*- coding: utf-8 -*-
# Generated by Django 1.11.29 on 2020-05-12 22:41
from __future__ import unicode_literals

from django.db import migrations
from collections import defaultdict


def dedeupe_emails(email_model):
    # this query finds useremail matches that are case insensitive matches
    # note we get a result for each item in the pair (intentional)
    query = email_model.objects.raw(
        """
        SELECT dupe_ue.*
        FROM sentry_useremail ue
        INNER JOIN sentry_useremail dupe_ue ON (lower(ue.email) = lower(dupe_ue.email))
        WHERE dupe_ue.user_id = ue.user_id
        AND ue.email != dupe_ue.email
        """
    )
    # create pairings of each email so we can figure out which one to delete
    email_pairings = defaultdict(list)
    for user_email in query:
        # make pairing based off user id and lowercase email
        lowercase = user_email.email.lower()
        key = "%d_%s"%(user_email.user_id, lowercase)
        email_pairings[key].append(user_email)
        # should never have more than 2 based on the data I've seen
        if len(email_pairings[key]) > 2:
            raise Exception("Unexpected email duplicate matches")

    # for each email, delete 1 email
    # if one is verified but the other is not, delete the unverified one
    # otherwise, just delete the non-lowercase one
    for email_pair in email_pairings.values():
        [email1, email2] = email_pair
        if email1.is_verified and not email2.is_verified:
            email2.delete()
        elif not email1.is_verified and email2.is_verified:
            email1.delete()
        else:
            if email1.email == email1.email.lower():
                email2.delete()
            else:
                email1.delete()


def forwards(apps, schema_editor):
    UserEmail = apps.get_model("sentry", "UserEmail")
    dedeupe_emails(UserEmail)


class Migration(migrations.Migration):
    # This flag is used to mark that a migration shouldn't be automatically run in
    # production. We set this to True for operations that we think are risky and want
    # someone from ops to run manually and monitor.
    # General advice is that if in doubt, mark your migration as `is_dangerous`.
    # Some things you should always mark as dangerous:
    # - Large data migrations. Typically we want these to be run manually by ops so that
    #   they can be monitored. Since data migrations will now hold a transaction open
    #   this is even more important.
    # - Adding columns to highly active tables, even ones that are NULL.
    is_dangerous = True

    # This flag is used to decide whether to run this migration in a transaction or not.
    # By default we prefer to run in a transaction, but for migrations where you want
    # to `CREATE INDEX CONCURRENTLY` this needs to be set to False. Typically you'll
    # want to create an index concurrently when adding one to an existing table.
    atomic = True


    dependencies = [
        ('sentry', '0075_metric_alerts_fix_releases'),
    ]

    operations = [migrations.RunPython(forwards, migrations.RunPython.noop)]
